// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
        // щ(ﾟДﾟщ) CPU, Y U NO WORK?!?!
        Not(in = instruction[15], out = nIn0);
        And(a = nIn0, b = instruction[5], out = aregBlam);
        Mux16(a = aluOut, b = instruction, sel = aregBlam, out = m1Out);
        Not(in = instruction[15], out = notI);
        Register(in = m1Out, load = notI, out = aOut);
        // We have a language flaw! (╯°□°）╯︵ ┻━┻
        BS(in = aOut, out = addressM);
        Mux16(a = aOut, b = inM, sel = instruction[12], out = m2Out);       
        And(a = instruction[15], b = instruction[4], out = dregBlam);
        Register(in = aluOut, load = dregBlam, out = dOut);
        ALU(x = dOut, y = m2Out, zx = instruction[11], nx = instruction[10], zy = instruction[9],
            ny = instruction[7], f = instruction[7], no = instruction[6], out = outM, out = aluOut,
            zr = zr, ng = ng);
        Not(in = ng, out = notNG);
        Not(in = zr, out = notZR);
        And(a = notNG, b = notZR, out = t1);
        Or(a = notNG, b = zr, out = t2);
        And(a = ng, b = notZR, out = t3);
        Or(a = ng, b = zr, out = t4);
        Mux8Way(a = false, b = t1, c = zr, d = t2, e = t3, f = notZR, g = t4, h = true,
                sel = instruction[13..15], out = bigMux);
        PC(in = aOut, load = bigMux, inc = true, reset = reset, out = pcOut);
        BS(in = pcOut, out = pc);
        And(a = instruction[3], b = true, out = writeM);
        
}
